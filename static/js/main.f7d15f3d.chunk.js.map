{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","role","word","lower","toLowerCase","toUpperCase","slice","capitalize","msg","Navbar","modeSwitch","document","getElementById","mode","title","id","onClick","checked","toggleMode","htmlFor","TextForm","wordCount","text","split","filter","el","length","useState","setText","heading","value","rows","onChange","e","newText","target","placeholder","disabled","showAlert","words","map","substring","join","copyText","select","navigator","clipboard","writeText","getSelection","removeAllRanges","defaultProps","App","message","setAlert","setTimeout","setMode","setmode","body","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f7d15f3d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase()\r\n        return lower[0].toUpperCase() + lower.slice(1)\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '50px',}}>\r\n        {    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n                <strong>{capitalize(props.alert.type)}: </strong> {props.alert.msg}\r\n                {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props){\r\n    let modeSwitch = document.getElementById(\"modeSwitch\");\r\n    const handleMode = () => {\r\n        let modeSwitch = document.getElementById(\"modeSwitch\");\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"light\");\r\n        }\r\n        else{\r\n            props.toggleMode(\"dark\");\r\n        }\r\n    }\r\n    const handleRMode = () => {\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"danger\");\r\n        }\r\n    }\r\n    const handleBMode = () => {\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"info\");\r\n        }\r\n    }\r\n    const handleYMode = () => {\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"warning\");\r\n        }\r\n    }\r\n    const handleGMode = () => {\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"success\");\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-${props.mode} bg-${props.mode} px-4`}>\r\n            <div className=\"container-fluid\">\r\n                <span className=\"navbar-brand mb-0 h1\">{props.title}</span>\r\n                <div className=\"d-flex\" id=\"colorPallets\">\r\n                    {/* <span className={`cpalate bg-${props.mode === 'light'?'dark':'light'}`} onClick={handleDLMode}></span> */}\r\n                    <span id=\"cpbtn1\" className=\"cpalate bg-danger\" onClick={handleRMode}></span>\r\n                    <span id=\"cpbtn2\" className=\"cpalate bg-info\" onClick={handleBMode}></span>\r\n                    <span id=\"cpbtn3\" className=\"cpalate bg-warning\" onClick={handleYMode}></span>\r\n                    <span id=\"cpbtn3\" className=\"cpalate bg-success\" onClick={handleGMode}></span>\r\n                </div>\r\n                <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\" id=\"modeSwitch\" onClick={handleMode}/>\r\n                    <label className=\"form-check-label\" htmlFor=\"modeSwitch\">DarkMode</label>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Set Title Here\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        setText(`${text.toUpperCase()}`)\r\n        props.showAlert('Conerted To UpperCase!', \"success\")\r\n    }\r\n    const handleLoClick = () =>{\r\n        setText(`${text.toLowerCase()}`)\r\n        props.showAlert('Conerted To LowerCase!', \"success\")\r\n    }\r\n    const handleCapClick = () =>{\r\n        if(text.length > 0){\r\n            let newText = text.toLowerCase();\r\n            const words = newText.split(/[ ]+/);\r\n            setText(`${words.map(word => {\r\n                if(word.length !== 0){\r\n                    return word[0].toUpperCase() + word.substring(1)\r\n                }\r\n                else{\r\n                    return word;\r\n                }\r\n            }).join(\" \")}`)\r\n            props.showAlert('Conerted To Capitalize!', \"success\")\r\n        }\r\n    }\r\n    const handleClrClick = () =>{\r\n        setText(``)\r\n        props.showAlert('Text Cleared!', \"warning\")\r\n    }\r\n    const handleCpClick = () =>{\r\n        var copyText = document.getElementById(\"myInput\");\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert('Text Copy to clipboard!', \"success\")\r\n    }\r\n    const handleRmesClick = () =>{\r\n        const words = text.split(/[ ]+/);\r\n        setText(words.join(\" \"))\r\n        props.showAlert('Extra Space Removed!', \"warning\")\r\n    }\r\n\r\n    const handleOnChange = (e) =>{\r\n        const newText = e.target.value\r\n        setText(newText);\r\n    }\r\n    const wordCount = () =>{\r\n        return text.split(/[ ]+/).filter( (el)=>{return el.length !== 0}).length;\r\n    }\r\n\r\n    const [text, setText ] = useState('')\r\n\r\n    return (\r\n        <div className='pt-3'>\r\n            <div className=\"container px-5 mb-3\">\r\n                <h1 className=\"mb-4\">{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className={`form-control bg-${props.mode} text-${props.mode === 'light'?'dark':'light'}`} id=\"myInput\" value={text} rows=\"8\" onChange={handleOnChange} placeholder='Enter Your Text'></textarea>\r\n                </div>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleUpClick}>UpperCase</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleLoClick}>LowerCase</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleCapClick}>Capitalize</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleRmesClick}>Remove Extra Spaces</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleCpClick}>Copy Text</button>\r\n                <button disabled={text.length === 0} className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleClrClick}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container px-5 mb-3\">\r\n                <h3>Your Text Summary</h3>\r\n                <p>{wordCount()} Words and {text.length} Characters</p>\r\n                <p>{0.005 * wordCount()} Minute to Read</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\nfunction App() {\n  const toggleMode =(setmode) =>{\n    if(setmode === 'light'){\n      setMode(\"dark\")\n      document.body.style.backgroundColor=\"#2f3439\"\n      document.body.style.color=\"white\"\n      showAlert('DarkMode Enabled','success')\n    }\n    if(setmode === 'dark'){\n      setMode(\"light\")\n      document.body.style.backgroundColor=\"white\"\n      document.body.style.color=\"black\"\n      showAlert('DarkMode Disabled','success')\n    }\n    if(setmode === 'warning'){\n      setMode(\"warning\")\n      document.body.style.backgroundColor=\"#262513\"\n      document.body.style.color=\"white\"\n      // showAlert('DarkMode Disabled','success')\n    }\n    if(setmode === 'danger'){\n      setMode(\"danger\")\n      document.body.style.backgroundColor=\"#261313\"\n      document.body.style.color=\"white\"\n      // showAlert('DarkMode Disabled','success')\n    }\n    if(setmode === 'info'){\n      setMode(\"info\")\n      document.body.style.backgroundColor=\"#131e26\"\n      document.body.style.color=\"white\"\n      // showAlert('DarkMode Disabled','success')\n    }\n    if(setmode === 'success'){\n      setMode(\"success\")\n      document.body.style.backgroundColor=\"#09180d\"\n      document.body.style.color=\"white\"\n      // showAlert('DarkMode Disabled','success')\n    }\n  }\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n\n  }\n\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  return (\n    <>\n      <Navbar title={\"Text Utils\"} mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <TextForm heading={\"Enter the text to analyze\"} mode={mode} showAlert= {showAlert} />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}