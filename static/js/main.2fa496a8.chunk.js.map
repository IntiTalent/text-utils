{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","toUpperCase","slice","capitalize","msg","Navbar","modeSwitch","document","getElementById","mode","title","class","id","onClick","checked","toggleMode","htmlFor","TextForm","wordCount","text","length","split","useState","setText","heading","value","rows","onChange","e","newText","target","placeholder","showAlert","words","map","substring","join","copyText","select","navigator","clipboard","writeText","defaultProps","App","message","setAlert","setTimeout","setMode","setmode","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2fa496a8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase()\r\n        return lower[0].toUpperCase() + lower.slice(1)\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show position-fixed w-100`} role=\"alert\" >\r\n            <strong>{capitalize(props.alert.type)}: </strong> {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n","import react from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props){\r\n    let modeSwitch = document.getElementById(\"modeSwitch\");\r\n    const handleMode = () => {\r\n        let modeSwitch = document.getElementById(\"modeSwitch\");\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"light\");\r\n        }\r\n        else{\r\n            props.toggleMode(\"dark\");\r\n        }\r\n    }\r\n    const handleRMode = () => {\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"danger\");\r\n        }\r\n    }\r\n    const handleBMode = () => {\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"info\");\r\n        }\r\n    }\r\n    const handleYMode = () => {\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"warning\");\r\n        }\r\n    }\r\n    const handleGMode = () => {\r\n        if(modeSwitch.checked){\r\n            props.toggleMode(\"success\");\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-${props.mode} bg-${props.mode} px-4`}>\r\n            <div className=\"container-fluid\">\r\n                <span className=\"navbar-brand mb-0 h1\">{props.title}</span>\r\n                <div class=\"d-flex\" id=\"colorPallets\">\r\n                    {/* <span className={`cpalate bg-${props.mode === 'light'?'dark':'light'}`} onClick={handleDLMode}></span> */}\r\n                    <span id=\"cpbtn1\" className=\"cpalate bg-danger\" onClick={handleRMode}></span>\r\n                    <span id=\"cpbtn2\" className=\"cpalate bg-info\" onClick={handleBMode}></span>\r\n                    <span id=\"cpbtn3\" className=\"cpalate bg-warning\" onClick={handleYMode}></span>\r\n                    <span id=\"cpbtn3\" className=\"cpalate bg-success\" onClick={handleGMode}></span>\r\n                </div>\r\n                <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\" id=\"modeSwitch\" onClick={handleMode}/>\r\n                    <label className=\"form-check-label\" htmlFor=\"modeSwitch\">DarkMode</label>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Set Title Here\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        setText(`${text.toUpperCase()}`)\r\n        props.showAlert('Conerted To UpperCase!', \"success\")\r\n    }\r\n    const handleLoClick = () =>{\r\n        setText(`${text.toLowerCase()}`)\r\n        props.showAlert('Conerted To LowerCase!', \"success\")\r\n    }\r\n    const handleCapClick = () =>{\r\n        if(text.length > 0){\r\n            let newText = text.toLowerCase();\r\n            const words = newText.split(\" \");\r\n            setText(`${words.map(word => {\r\n                return word[0].toUpperCase() + word.substring(1)\r\n            }).join(\" \")}`)\r\n            props.showAlert('Conerted To Capitalize!', \"success\")\r\n        }\r\n    }\r\n    const handleClrClick = () =>{\r\n        setText(``)\r\n        props.showAlert('Text Cleared!', \"warning\")\r\n    }\r\n    const handleCpClick = () =>{\r\n        var copyText = document.getElementById(\"myInput\");\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        props.showAlert('Text Copy to clipboard!', \"success\")\r\n    }\r\n    const handleRmesClick = () =>{\r\n        const words = text.split(/[ ]+/);\r\n        setText(words.join(\" \"))\r\n        props.showAlert('Extra Space Removed!', \"warning\")\r\n    }\r\n\r\n    const handleOnChange = (e) =>{\r\n        const newText = e.target.value\r\n        setText(newText);\r\n    }\r\n    const wordCount = () =>{\r\n        if(text == \" \" || text == \"  \"){\r\n            return 0;\r\n        }\r\n        else if(text.length <= 1){\r\n            return text.length;\r\n        }\r\n        else{\r\n            return text.split(/[ ]+/).length;\r\n        }\r\n    }\r\n\r\n    const [text, setText ] = useState('')\r\n\r\n    return (\r\n        <div className='mt-5 pt-3'>\r\n            <div className=\"container px-5 mb-3\">\r\n                <h1 className=\"mb-4\">{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className={`form-control bg-${props.mode} text-${props.mode === 'light'?'dark':'light'}`} id=\"myInput\" value={text} rows=\"8\" onChange={handleOnChange} placeholder='Enter Your Text'></textarea>\r\n                </div>\r\n                <div className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleUpClick}>UpperCase</div>\r\n                <div className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleLoClick}>LowerCase</div>\r\n                <div className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleCapClick}>Capitalize</div>\r\n                <div className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleRmesClick}>Remove Extra Spaces</div>\r\n                <div className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleCpClick}>Copy Text</div>\r\n                <div className={`btn btn-${props.mode === 'light'?'primary': props.mode} m-1`} onClick={handleClrClick}>Clear Text</div>\r\n            </div>\r\n            <div className=\"container px-5 mb-3\">\r\n                <h3>Your Text Summary</h3>\r\n                <p>{wordCount()} Words and {text.length} Characters</p>\r\n                <p>{0.005 * wordCount()} Minute to Read</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\nfunction App() {\n  const toggleMode =(setmode) =>{\n    if(setmode == 'light'){\n      setMode(\"dark\")\n      document.body.style.backgroundColor=\"#2f3439\"\n      document.body.style.color=\"white\"\n      showAlert('DarkMode Enabled','success')\n    }\n    if(setmode == 'dark'){\n      setMode(\"light\")\n      document.body.style.backgroundColor=\"white\"\n      document.body.style.color=\"black\"\n      showAlert('DarkMode Disabled','success')\n    }\n    if(setmode == 'warning'){\n      setMode(\"warning\")\n      document.body.style.backgroundColor=\"#262513\"\n      document.body.style.color=\"white\"\n      // showAlert('DarkMode Disabled','success')\n    }\n    if(setmode == 'danger'){\n      setMode(\"danger\")\n      document.body.style.backgroundColor=\"#261313\"\n      document.body.style.color=\"white\"\n      // showAlert('DarkMode Disabled','success')\n    }\n    if(setmode == 'info'){\n      setMode(\"info\")\n      document.body.style.backgroundColor=\"#131e26\"\n      document.body.style.color=\"white\"\n      // showAlert('DarkMode Disabled','success')\n    }\n    if(setmode == 'success'){\n      setMode(\"success\")\n      document.body.style.backgroundColor=\"#09180d\"\n      document.body.style.color=\"white\"\n      // showAlert('DarkMode Disabled','success')\n    }\n  }\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n\n  }\n\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  return (\n    <>\n      <Navbar title={\"Text Utils\"} mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <TextForm heading={\"Enter the text to analyze\"} mode={mode} showAlert= {showAlert} />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}